import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:Feedme/Page/CartPage.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:provider/provider.dart';
import 'package:Feedme/Page/cart_provider.dart';
import 'package:Feedme/Page/product_list.dart';
import 'package:Feedme/Page/mapPage.dart'; // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö MapPage
import 'package:latlong2/latlong.dart'; // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LatLng
import 'package:http/http.dart' as http; // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API call

class PaymentPage extends StatefulWidget {
  @override
  _PaymentPageState createState() => _PaymentPageState();
}

class _PaymentPageState extends State<PaymentPage> {
  LatLng _selectedLocation = LatLng(13.7563, 100.5018);
  String _selectedLocationDetails = "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£, ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢";
  String _deliveryMethod = "‡∏à‡∏±‡∏î‡∏™‡πà‡∏á"; // ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ñ‡∏∑‡∏≠ "‡∏à‡∏±‡∏î‡∏™‡πà‡∏á"

  @override
  Widget build(BuildContext context) {
    final cartProvider = Provider.of<CartProvider>(context);
    double totalPrice = cartProvider.getTotalPrice();
    double shippingCost = _deliveryMethod == "‡∏à‡∏±‡∏î‡∏™‡πà‡∏á" ? 50.0 : 0.0;
    double grandTotal = totalPrice + shippingCost;

    String productName = cartProvider
        .getItems()
        .map((item) => item.productName)
        .join(", ");

    return Scaffold(
      appBar: AppBar(
        title: const Text(
          "Paymant",
          style: TextStyle(color: Colors.white), // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß
        ),
        backgroundColor: Colors.blue, // ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á AppBar
        elevation: 0,
        centerTitle: true,// ‡πÄ‡∏≠‡∏≤‡πÄ‡∏á‡∏≤‡∏Ç‡∏≠‡∏á AppBar ‡∏≠‡∏≠‡∏Å
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // üìç ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
            Text("‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á", style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
            SizedBox(height: 10),
            InkWell(
              onTap: () async {
                final LatLng? newLocation = await Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => MapPage()),
                );

                if (newLocation != null) {
                  setState(() {
                    _selectedLocation = newLocation;
                    _selectedLocationDetails =
                    "Lat: ${newLocation.latitude}, Lng: ${newLocation.longitude}";
                  });
                }
              },
              child: Row(
                children: [
                  Expanded(
                    child: Text(
                      _selectedLocationDetails,
                      style: TextStyle(fontSize: 16, color: Colors.blue),
                      overflow: TextOverflow.ellipsis,
                    ),
                  ),
                  Icon(Icons.location_on, color: Colors.red),
                ],
              ),
            ),

            SizedBox(height: 20),

            // üéØ ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
            Text("‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
            SizedBox(height: 10),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceAround,
              children: [
                ElevatedButton(
                  onPressed: () {
                    setState(() {
                      _deliveryMethod = "‡∏à‡∏±‡∏î‡∏™‡πà‡∏á";
                    });
                  },
                  style: ElevatedButton.styleFrom(
                    backgroundColor: _deliveryMethod == "‡∏à‡∏±‡∏î‡∏™‡πà‡∏á" ? Colors.blue : Colors.grey[200],
                    foregroundColor: _deliveryMethod == "‡∏à‡∏±‡∏î‡∏™‡πà‡∏á" ? Colors.white : Colors.black,
                    minimumSize: Size(150, 50),
                  ),
                  child: Text("‡∏à‡∏±‡∏î‡∏™‡πà‡∏á"),
                ),
                ElevatedButton(
                  onPressed: () {
                    setState(() {
                      _deliveryMethod = "‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏ô";
                    });
                  },
                  style: ElevatedButton.styleFrom(
                    backgroundColor: _deliveryMethod == "‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏ô" ? Colors.blue : Colors.grey[200],
                    foregroundColor: _deliveryMethod == "‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏ô" ? Colors.white : Colors.black,
                    minimumSize: Size(150, 50),
                  ),
                  child: Text("‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏ô"),
                ),
              ],
            ),

            SizedBox(height: 20),

            Divider(),

            // üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
            Text("‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠", style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
            SizedBox(height: 10),
            ReusableWidget(title: "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", value: totalPrice),
            ReusableWidget(title: "‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á", value: shippingCost),
            ReusableWidget(title: "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°", value: grandTotal),

            Spacer(),

            // üõí ‡∏õ‡∏∏‡πà‡∏°‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
            ElevatedButton(
              onPressed: () async {
                // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á API
                print("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: $_deliveryMethod");
              },
              style: ElevatedButton.styleFrom(
                minimumSize: Size(double.infinity, 50),
              ),
              child: Text("‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô"),
            ),
          ],
        ),
      ),
    );
  }
}

